name: CMake CI

on:
  push:
    paths:
      - 'frontend/unibert-desktop-client/**'
      - '.github/workflows/cmake-single-platform.yml'
  pull_request:
    paths:
      - 'frontend/unibert-desktop-client/**'
      - '.github/workflows/cmake-single-platform.yml'

jobs:
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format style check for C/C++/Protobuf programs.
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: '13'
          check-path: 'frontend/unibert-desktop-client'
          fallback-style: 'Google'
  build-and-test:
    runs-on: ubuntu-latest
    name: Build client and run Tests
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          libgtest-dev \
          libgmock-dev \
          cmake \
          ninja-build \
          build-essential \
          libcurlpp-dev

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.1'
          host: 'linux'
          target: 'desktop'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout submodules # checkout rest
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1


      - name: Configure CMake
        working-directory: frontend/unibert-desktop-client
        run: cmake -DCMAKE_PREFIX_PATH=~/Qt/6.8.1/gcc_64/lib/cmake/ -S . -B build -G Ninja

      - name: Build
        working-directory: frontend/unibert-desktop-client/build
        run: cmake --build .

      - name: Test
        working-directory: frontend/unibert-desktop-client/build
        run: ctest --output-on-failure

#  push:
#    branches:
#      - main
#    paths:
#      - 'frontend/unibert-desktop-client/**'
#      - '.github/workflows/cmake-single-platform.yml'
#  pull_request:
#    branches:
#      - main
#    paths:
#      - 'frontend/unibert-desktop-client/**'
#      - '.github/workflows/cmake-single-platform.yml'
#
#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    if: ${{ github.ref == 'refs/heads/main' && github.event.head_commit.message != 'skip-release' }}
#    name: Deploy build artifacts
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Create GitHub release
#        id: create_release
#        uses: actions/create-release@v1
#        with:
#          tag_name: v1.0.${{ github.run_number }}
#          release_name: Release v1.0.${{ github.run_number }}
#          draft: false
#          prerelease: false
#
#      - name: Upload build artifacts to GitHub Releases
#        uses: actions/upload-release-asset@v1
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: frontend/unibert-desktop-client/build/your-binary-or-archive
#          asset_name: your-binary-or-archive-name
#          asset_content_type: application/octet-stream